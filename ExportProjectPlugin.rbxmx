<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Script" referent="RBX2967ACAD18204F9486CFBC271498F3D2">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
			<bool name="DefinesCapabilities">false</bool>
			<bool name="Disabled">false</bool>
			<Content name="LinkedSource"><null></null></Content>
			<string name="Name">ExportProjectPlugin</string>
			<token name="RunContext">0</token>
			<string name="ScriptGuid">{0BFCD7AD-AAFA-405C-994C-325ED1D98CF0}</string>
			<ProtectedString name="Source"><![CDATA[--[[
    Roblox Studio Plugin: Project Cloner
    This plugin sends the project structure to a local Python server.
]]

local HttpService = game:GetService("HttpService")
local toolbar = plugin:CreateToolbar("Project Cloner")
local cloneButton = toolbar:CreateButton("Clone Project to PC", "Clones the project structure to your PC", "rbxassetid://10700224395")

local SERVER_URL = "http://127.0.0.1:5000/clone"
local CHUNK_SIZE = 900 * 1024 -- 900KB chunks to stay under the 1MB limit

local servicesToClone = {
	"Workspace",
	"Lighting",
	"MaterialService",
	"ReplicatedFirst",
	"ReplicatedStorage",
	"ServerScriptService",
	"ServerStorage",
	"StarterGui",
	"StarterPack",
	"StarterPlayer",
	"Teams"
}

-- Function to traverse the game hierarchy and build a table
local function traverse(instance)
	local data = {}
	data.Name = instance.Name
	data.ClassName = instance.ClassName
	data.Children = {}

	if instance:IsA("Script") or instance:IsA("LocalScript") or instance:IsA("ModuleScript") then
		data.Source = instance.Source
	end

	for _, child in ipairs(instance:GetChildren()) do
		table.insert(data.Children, traverse(child))
	end

	return data
end

-- Function to send data to the server in chunks
local function sendDataInChunks(data)
	local jsonString = HttpService:JSONEncode(data)
	local totalLength = string.len(jsonString)
	local numChunks = math.ceil(totalLength / CHUNK_SIZE)

	for i = 1, numChunks do
		local startIndex = (i - 1) * CHUNK_SIZE + 1
		local endIndex = math.min(i * CHUNK_SIZE, totalLength)
		local chunk = string.sub(jsonString, startIndex, endIndex)

		local success, response = pcall(function()
			HttpService:PostAsync(SERVER_URL, chunk, Enum.HttpContentType.ApplicationJson)
		end)

		if not success then
			warn("Failed to send chunk " .. i .. " to the server: " .. tostring(response))
			return
		end
		wait(0.1) -- Small delay to avoid overwhelming the server
	end

	-- Send a final request to signal completion
	pcall(function()
		HttpService:PostAsync(SERVER_URL .. "/complete", "done")
	end)
	print("Project cloning process initiated.")
end

-- Action when the button is clicked
cloneButton.Click:Connect(function()
	local projectData = {}
	for _, serviceName in ipairs(servicesToClone) do
		local service = game:GetService(serviceName)
		if service then
			table.insert(projectData, traverse(service))
		end
	end

	sendDataInChunks(projectData)
end)]]></ProtectedString>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
</roblox>